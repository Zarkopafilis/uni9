MICRO

c Bootstrap
m00 00000 000 000 111 000 011 1111 1111 00 0111010111
m01 00000 000 000 000 000 001 0000 0000 00 0010000000

c LOADBR #K
m02 00000 000 000 101 000 011 1111 1111 01 0111011110
m03 00000 000 000 111 000 011 1000 1000 00 0110011101
c NEXTINSTR
m04 00000 000 000 101 000 011 1111 1111 01 0111011110
m05 00000 000 000 000 000 001 0000 0000 00 0010000000

c LOADSP #K
m06 00000 000 000 101 000 011 1111 1111 01 0111011110
m07 00000 000 000 111 000 011 1001 1001 00 0110011101
c NEXTINSTR
m08 00000 000 000 101 000 011 1111 1111 01 0111011110
m09 00000 000 000 000 000 001 0000 0000 00 0010000000

c LOADLR #K
m0a 00000 000 000 101 000 011 1111 1111 01 0111011110
m0b 00000 000 000 111 000 011 1100 1100 00 0110011101
c NEXTINSTR
m0c 00000 000 000 101 000 011 1111 1111 01 0111011110
m0d 00000 000 000 000 000 001 0000 0000 00 0010000000

c PUSH $K 
m0e 00000 000 000 101 000 011 1111 1111 01 0111011110 //K at MDR
m0f 00000 000 000 111 000 001 0000 0000 00 0111011101 // deref K again
m10 00000 000 000 111 000 011 1011 1011 00 0110011101 // mdr -> b
m11 00000 000 000 001 001 001 1001 1100 00 0110111011 //cmp sp, lr fixme
m12 00100 011 011 000 000 000 0000 0000 00 0110011110 //jump lower if neq 
c ACTUAL PUSH 
m13 00000 000 000 101 000 011 1001 1001 01 0110111110 //inc sp
m14 00000 000 000 100 000 001 1001 1001 00 0111011111 //NOP, SP -> MAR
m15 00000 000 000 100 000 001 1011 1011 00 0100011111 // B -> MWE~
c NEXTINSTR
m16 00000 000 000 101 000 011 1111 1111 01 0111011110
m17 00000 000 000 000 000 001 0000 0000 00 0010000000

c POP $K 
m18 00000 000 000 001 001 001 1001 1000 00 0110111011//cmp sp, br
m19 00111 011 011 000 000 000 0000 0000 00 0110011110 //jump lower if neq 
c ACTUAL POP 
m1a 00000 000 000 100 000 011 1001 1001 00 0111011111 //top of stack at MDR 
m1b 00000 000 000 111 000 011 1011 1011 00 0110011101 // MDR -> B
m1c 00000 000 000 101 000 011 1111 1111 01 0111011110 //K at MDR
c m1c 00000 000 000 111 000 011 1011 1011 00 0110011101 // mdr -> b 
m1d 00000 000 000 111 000 001 0000 0000 00 0111011101 // NOP, K -> MAR
m1e 00000 000 000 100 000 001 1011 1011 00 0100011111 // B -> MWE~
m1f 00000 000 000 101 001 011 1001 1001 01 0110111110 // dec SP
c NEXTINSTR
m20 00000 000 000 101 000 011 1111 1111 01 0111011110
m21 00000 000 000 000 000 001 0000 0000 00 0010000000

c ADD 
m22 00000 000 000 101 001 011 1001 1011 10 0110011110 //sp - 2 -> B //////////fixme
m23 00000 000 000 001 001 001 1011 1000 00 0110111011 // cmp b (sp - 2), br
m24 00111 011 011 000 000 000 0000 0000 00 0110011110//jump lower if neq 
c ACTUAL ADD 
m25 00000 000 000 100 000 011 1001 1001 00 0111011111 //top of stack at MDR 
m26 00000 000 000 111 000 011 1011 1011 00 0110011101 //save to b
m27 00000 000 000 101 001 011 1001 1001 01 0110111110 //dec SP
m28 00000 000 000 100 000 011 1001 1001 00 0111011111 //new top of stack at MDR
m29 00000 000 000 101 000 011 1011 1011 00 0110011101 // B + mdr -> B
m2a 00000 000 000 100 000 001 1001 1001 00 0111011111 //NOP, SP -> MAR
m2b 00000 000 000 100 000 001 1011 1011 00 0100011111 // B -> MWE~
c NEXTINSTR
m2c 00000 000 000 101 000 011 1111 1111 01 0111011110
m2d 00000 000 000 000 000 001 0000 0000 00 0010000000

c SUB
m2e 00000 000 000 101 001 011 1001 1011 10 0110011110 //sp - 2 -> B ///////////fixme
m2f 00000 000 000 001 001 001 1011 1000 00 0110111011 // cmp b (sp - 2), br
m30 00001 011 011 000 000 000 0000 0000 00 0110011110 //jump lower if neq 
c ACTUAL SUB
m31 00000 000 000 100 000 011 1001 1001 00 0111011111 //top of stack at MDR 
m32 00000 000 000 111 000 011 1011 1011 00 0110011101 //save to b
m33 00000 000 000 101 001 011 1001 1001 01 0110111110 //dec SP
m34 00000 000 000 100 000 011 1001 1001 00 0111011111 //new top of stack at MDR 
m35 00000 000 000 101 010 011 1011 1011 00 0110011101 // MDR - B -> B
m36 00000 000 000 100 000 001 1001 1001 00 0111011111 //NOP, SP -> MAR
m37 00000 000 000 100 000 001 1011 1011 00 0100011111 // B -> MWE~
c NEXTINSTR
m38 00000 000 000 101 000 011 1111 1111 01 0111011110
m39 00000 000 000 000 000 001 0000 0000 00 0010000000


MAPPER

c LOADBR
m00 02
c LOADSP 
m01 06
c LOADLR 
m02 0a
c PUSH
m03 0e
c POP
m04 18
c ADD
m05 22
c SUB
m06 2e

MAIN

c LOADBR $STACKSTART
m00 00
m01 50
c LOADSP $stackstart 
m02 01
m03 50 
c LOADLR
m04 02
m05 60

c PUSH
m06 03
m07 61

c PUSH 
m08 03
m09 62

c PUSH 
m0a 03 
m0b 63

c ADD 
m0c 05
c SUB 
m0d 06
c POP 
m0e 04
m0f 64

m61 0a
m62 01
m63 03
m64 00